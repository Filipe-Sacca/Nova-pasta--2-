/**
 * Status Polling Service
 *
 * Servi√ßo simplificado e otimizado para polling de status dos merchants a cada 30 segundos.
 *
 * O QUE FAZ:
 * - ‚úÖ Busca STATUS dos merchants do iFood a cada 30s
 * - ‚úÖ Atualiza status no banco de dados
 * - ‚úÖ Usa opening hours em CACHE (n√£o busca repetidamente)
 *
 * O QUE N√ÉO FAZ:
 * - ‚ùå N√ÉO busca opening hours (usa cache do banco)
 * - ‚ùå N√ÉO busca lista de merchants da API (usa banco local)
 * - ‚ùå N√ÉO faz sync de produtos/categorias
 */

import { IFoodMerchantStatusService } from './ifoodMerchantStatusService';
import { getSupabaseClient, getTokenForUser } from './ifoodTokenService';

const supabase = getSupabaseClient();

interface Merchant {
  merchant_id: string;
  user_id: string;
  name: string;
  status: boolean;
  operating_hours?: any;
}

export class StatusPollingService {
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;
  private readonly POLLING_INTERVAL = 30000; // 30 segundos EXATO

  /**
   * Inicia o polling de status a cada 30 segundos
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      console.log('üîÑ [STATUS-POLLING] J√° est√° em execu√ß√£o');
      return;
    }

    console.log('üöÄ [STATUS-POLLING] Iniciando polling a cada 30 segundos');
    console.log('üìã [STATUS-POLLING] Fun√ß√£o: Apenas verificar STATUS dos merchants');
    console.log('‚ö†Ô∏è  [STATUS-POLLING] N√ÉO busca opening hours (usa cache)');
    this.isRunning = true;

    // Executa imediatamente na primeira vez
    await this.executePollCycle();

    // Configura intervalo para execu√ß√µes futuras (30s EXATO)
    this.intervalId = setInterval(async () => {
      await this.executePollCycle();
    }, this.POLLING_INTERVAL);

    console.log('‚úÖ [STATUS-POLLING] Polling iniciado com sucesso');
  }

  /**
   * Para o polling
   */
  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
    console.log('üõë [STATUS-POLLING] Polling parado');
  }

  /**
   * Verifica se o polling est√° ativo
   */
  isActive(): boolean {
    return this.isRunning;
  }

  /**
   * Executa um ciclo completo de polling de status
   */
  private async executePollCycle(): Promise<void> {
    const cycleStart = Date.now();

    try {
      console.log('\nüîÑ ========== STATUS POLLING CYCLE START ==========');
      console.log(`‚è∞ [STATUS-POLLING] Timestamp: ${new Date().toISOString()}`);

      // 1. Buscar merchants do BANCO LOCAL (n√£o da API)
      const { data: merchants, error } = await supabase
        .from('ifood_merchants')
        .select('merchant_id, user_id, name, status, operating_hours');

      if (error || !merchants || merchants.length === 0) {
        console.log('‚ö†Ô∏è [STATUS-POLLING] Nenhum merchant encontrado no banco');
        return;
      }

      console.log(`üè™ [STATUS-POLLING] Encontrados ${merchants.length} merchants no banco`);

      let successCount = 0;
      let errorCount = 0;
      let skippedCount = 0;

      // 2. Para cada merchant, buscar APENAS o status
      for (const merchant of merchants as Merchant[]) {
        try {
          const { merchant_id, user_id, operating_hours } = merchant;

          // Valida√ß√µes b√°sicas
          if (!merchant_id || !user_id) {
            skippedCount++;
            continue;
          }

          // Verificar se tem opening hours em cache
          if (!operating_hours || !operating_hours.shifts || operating_hours.shifts.length === 0) {
            console.log(`‚ö†Ô∏è [STATUS-POLLING] Merchant ${merchant_id} sem opening hours em cache - pulando`);
            console.log(`üí° [STATUS-POLLING] TIP: Chame GET /merchants/${merchant_id}/opening-hours para buscar`);
            skippedCount++;
            continue;
          }

          // Buscar token do usu√°rio
          const tokenData = await getTokenForUser(user_id);
          if (!tokenData || !tokenData.access_token) {
            console.warn(`‚ö†Ô∏è [STATUS-POLLING] Token n√£o encontrado para merchant ${merchant_id}`);
            errorCount++;
            continue;
          }

          // 3. Buscar STATUS do iFood (√∫nica chamada √† API por merchant)
          const { success, data } = await IFoodMerchantStatusService.fetchMerchantStatus(
            merchant_id,
            tokenData.access_token
          );

          if (!success) {
            console.error(`‚ùå [STATUS-POLLING] Erro ao buscar status de ${merchant_id}`);
            errorCount++;
            continue;
          }

          // 4. Extrair status da resposta
          let isOpen = false;
          if (Array.isArray(data) && data.length > 0) {
            isOpen = data[0]?.available || data[0]?.state === 'OPEN' || false;
          } else if (data) {
            isOpen = data.available || data.state === 'OPEN' || false;
          }

          // 5. Atualizar no banco SOMENTE se mudou
          if (merchant.status !== isOpen) {
            const updated = await IFoodMerchantStatusService.updateMerchantStatus(merchant_id, isOpen);
            if (updated) {
              console.log(`üîÑ [STATUS-POLLING] Status atualizado: ${merchant.name} ‚Üí ${isOpen ? 'üü¢ ABERTO' : 'üî¥ FECHADO'}`);
              successCount++;
            }
          } else {
            // Status n√£o mudou, n√£o precisa atualizar
            console.log(`‚úÖ [STATUS-POLLING] Status mantido: ${merchant.name} ‚Üí ${isOpen ? 'üü¢' : 'üî¥'}`);
          }

        } catch (merchantError: any) {
          console.error(`‚ùå [STATUS-POLLING] Erro ao processar ${merchant.merchant_id}:`, merchantError.message);
          errorCount++;
        }
      }

      const cycleDuration = Date.now() - cycleStart;
      console.log(`\n‚úÖ ========== STATUS POLLING CYCLE END ==========`);
      console.log(`‚è∞ [STATUS-POLLING] Dura√ß√£o: ${cycleDuration}ms`);
      console.log(`üìä [STATUS-POLLING] Resultados:`);
      console.log(`   - Merchants processados: ${merchants.length}`);
      console.log(`   - Atualizados: ${successCount}`);
      console.log(`   - Erros: ${errorCount}`);
      console.log(`   - Pulados: ${skippedCount}`);
      console.log(`‚úÖ ========== NEXT CYCLE IN 30s ==========\n`);

    } catch (error: any) {
      console.error('‚ùå [STATUS-POLLING] Erro geral no ciclo:', error.message);
    }
  }

  /**
   * Retorna estat√≠sticas do polling
   */
  getStats(): { isRunning: boolean; interval: number } {
    return {
      isRunning: this.isRunning,
      interval: this.POLLING_INTERVAL
    };
  }
}

// Exportar singleton instance
let statusPollingInstance: StatusPollingService | null = null;

export function getStatusPollingService(): StatusPollingService {
  if (!statusPollingInstance) {
    statusPollingInstance = new StatusPollingService();
  }
  return statusPollingInstance;
}

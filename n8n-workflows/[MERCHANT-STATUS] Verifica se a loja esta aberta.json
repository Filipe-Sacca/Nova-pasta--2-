{
  "name": "[MERCHANT-STATUS] Verifica se a loja esta aberta",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "ifood_tokens",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        208,
        0
      ],
      "id": "c3ac6f3a-9009-47c3-b778-99e0940f5cc3",
      "name": "[GET] Pega o Token",
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "WZwCLxbNyERjD8WU",
          "name": "Supabase Plano Certo APP"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e94d319c-671b-491d-b3db-08061644ee74",
              "name": "error",
              "value": "={{ $json.error.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        768,
        160
      ],
      "id": "187fc0fd-0dae-427c-9bd6-d4e3bc1d9ac8",
      "name": "[ERROR] Mensagem de Erro do Endpoint"
    },
    {
      "parameters": {
        "content": "## Verificação de Status completo de Lojas ",
        "height": 576,
        "width": 2704,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -32,
        -192
      ],
      "id": "8f67622f-008f-4cd1-b565-1e37581fb301",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6026fed3-d42e-4dff-809d-bc6e980d4629",
              "name": "id",
              "value": "={{ $('[GET ALL] Pega todos os IDs dos Merchants').item.json.merchant_id }}",
              "type": "string"
            },
            {
              "id": "741576dc-9b82-4905-a53f-9feea2c042ec",
              "name": "name",
              "value": "={{ $('[GET ALL] Pega todos os IDs dos Merchants').item.json.name }}",
              "type": "string"
            },
            {
              "id": "68364279-bd72-4f08-8b60-2dc0e20e1b92",
              "name": "status",
              "value": "={{ $json.available }}",
              "type": "string"
            },
            {
              "id": "66aa857a-3d86-441c-b857-bd80bf955205",
              "name": "corporate_name",
              "value": "={{ $('[GET ALL] Pega todos os IDs dos Merchants').item.json.corporate_name }}",
              "type": "string"
            },
            {
              "id": "f016edc3-9456-4170-9a5e-1ebaefe1afa9",
              "name": "user_id",
              "value": "={{ $('[GET ALL] Pega todos os IDs dos Merchants').item.json.user_id }}",
              "type": "string"
            },
            {
              "id": "510c99c9-af2b-4bea-9d57-99350209cd09",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "object"
            },
            {
              "id": "821a02fe-131d-44f4-8286-f4f454d280e9",
              "name": "horário_funcionamento",
              "value": "={{ $json.validations[1].message.subtitle }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        768,
        -16
      ],
      "id": "f2316f37-2617-4c16-a94f-65c01fea44f5",
      "name": "[FILTER] Separa dados Importantes"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "ifood_merchants",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        400,
        0
      ],
      "id": "2674be7d-41cd-400f-9add-2a2fa9ffe124",
      "name": "[GET ALL] Pega todos os IDs dos Merchants",
      "credentials": {
        "supabaseApi": {
          "id": "WZwCLxbNyERjD8WU",
          "name": "Supabase Plano Certo APP"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        32,
        0
      ],
      "id": "af3f2bce-5e91-4280-bc87-8071d81ae673",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "71e9d364-d835-4547-9c14-7febc74bdb8c",
              "leftValue": "={{ $json.status }}",
              "rightValue": "false",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        944,
        -16
      ],
      "id": "5fb0c31f-0210-4671-b34b-95980482d656",
      "name": "[FILTER] Verifica se o status é false"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1152,
        160
      ],
      "id": "2118aeb5-dc6e-4c5f-b662-171c53a4e69a",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0e6729b0-d493-4726-bf5c-aa45efc1875f",
              "leftValue": "={{ $now.format('HH:mm:ss') }}",
              "rightValue": "={{ $json.horarioAbertura }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            },
            {
              "id": "2f393de5-a009-40e6-a626-c06c4b3cc25f",
              "leftValue": "={{ $now.format('HH:mm:ss') }}",
              "rightValue": "={{ $json.horarioFechamento }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2096,
        -144
      ],
      "id": "0d26ea36-352e-4193-8bb0-f935e7972460",
      "name": "[FILTER] Verifica se esta dentro do horário de funcionamento"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "ifood_merchants",
        "filters": {
          "conditions": [
            {
              "keyName": "merchant_id",
              "condition": "eq",
              "keyValue": "={{ $item(\"0\").$node[\"[FILTER] Verifica se o status é false\"].json[\"id\"] }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "={{ $item(\"0\").$node[\"Filtragem de dados\"].json[\"isOpen\"] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2512,
        -160
      ],
      "id": "a877d497-1bfd-4d51-80e3-095cb26d5649",
      "name": "[UPDATE] Atualiza o horário de funcionamento",
      "credentials": {
        "supabaseApi": {
          "id": "WZwCLxbNyERjD8WU",
          "name": "Supabase Plano Certo APP"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://merchant-api.ifood.com.br/merchant/v1.0/merchants/{{ $json.id }}/opening-hours",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"[GET] Pega o Token\"].json[\"access_token\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        -32
      ],
      "id": "06970be7-166f-4133-b471-620ef67d9d80",
      "name": "[GET] Opening-Hours",
      "alwaysOutputData": false,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "// Função para converter minutos em formato HH:MM:SS\nfunction minutesToTime(minutes) {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:00`;\n}\n\n// Função para somar tempo no formato HH:MM:SS com duração em minutos\nfunction addMinutesToTime(timeStr, minutes) {\n  // Extrair horas, minutos e segundos (se houver)\n  const timeParts = timeStr.split(':');\n  const hours = parseInt(timeParts[0]) || 0;\n  const mins = parseInt(timeParts[1]) || 0;\n  const seconds = parseInt(timeParts[2]) || 0;\n  \n  const totalMinutes = (hours * 60) + mins + minutes;\n  \n  // Lidar com horários que passam da meia-noite\n  const finalMinutes = totalMinutes % (24 * 60);\n  const finalHours = Math.floor(finalMinutes / 60);\n  const finalMins = finalMinutes % 60;\n  \n  return `${finalHours.toString().padStart(2, '0')}:${finalMins.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n}\n\n// Mapeamento dos dias da semana para português\nconst dayMapping = {\n  'MONDAY': 'Segunda-feira',\n  'TUESDAY': 'Terça-feira',\n  'WEDNESDAY': 'Quarta-feira',\n  'THURSDAY': 'Quinta-feira',\n  'FRIDAY': 'Sexta-feira',\n  'SATURDAY': 'Sábado',\n  'SUNDAY': 'Domingo'\n};\n\n// Função principal para processar os horários de funcionamento\nfunction processOpeningHours(openingHoursData) {\n  const result = [];\n  \n  // Se for um array direto de períodos (sem estrutura de establishment)\n  if (Array.isArray(openingHoursData)) {\n    openingHoursData.forEach(period => {\n      if (period.dayOfWeek && period.start && period.duration) {\n        const dayOfWeek = period.dayOfWeek;\n        const startTime = period.start;\n        const duration = period.duration;\n        const id = period.id;\n        \n        // Calcular horário de fechamento\n        const endTime = addMinutesToTime(startTime, duration);\n        \n        // Converter duração para formato legível\n        const durationFormatted = minutesToTime(duration);\n        \n        result.push({\n          id: id,\n          diaSemana: dayMapping[dayOfWeek] || dayOfWeek,\n          horarioAbertura: startTime,\n          horarioFechamento: endTime,\n          duracaoMinutos: duration,\n          duracaoFormatada: durationFormatted\n        });\n      }\n    });\n    return result;\n  }\n  \n  // Se for um objeto com estrutura opening_hours\n  if (openingHoursData && openingHoursData.periods) {\n    openingHoursData.periods.forEach(period => {\n      if (period.dayOfWeek && period.start && period.duration) {\n        const dayOfWeek = period.dayOfWeek;\n        const startTime = period.start;\n        const duration = period.duration;\n        const id = period.id;\n        \n        // Calcular horário de fechamento\n        const endTime = addMinutesToTime(startTime, duration);\n        \n        // Converter duração para formato legível\n        const durationFormatted = minutesToTime(duration);\n        \n        result.push({\n          id: id,\n          diaSemana: dayMapping[dayOfWeek] || dayOfWeek,\n          horarioAbertura: startTime,\n          horarioFechamento: endTime,\n          duracaoMinutos: duration,\n          duracaoFormatada: durationFormatted\n        });\n      }\n    });\n    return result;\n  }\n  \n  // Se for um array de estabelecimentos\n  if (Array.isArray(openingHoursData)) {\n    openingHoursData.forEach((establishment, index) => {\n      if (establishment.opening_hours && establishment.opening_hours.periods) {\n        const periods = establishment.opening_hours.periods;\n        \n        periods.forEach(period => {\n          const dayOfWeek = period.dayOfWeek;\n          const startTime = period.start;\n          const duration = period.duration;\n          const id = period.id;\n          \n          // Calcular horário de fechamento\n          const endTime = addMinutesToTime(startTime, duration);\n          \n          // Converter duração para formato legível\n          const durationFormatted = minutesToTime(duration);\n          \n          result.push({\n            id: id,\n            estabelecimento: index + 1,\n            diaSemana: dayMapping[dayOfWeek] || dayOfWeek,\n            horarioAbertura: startTime,\n            horarioFechamento: endTime,\n            duracaoMinutos: duration,\n            duracaoFormatada: durationFormatted\n          });\n        });\n      }\n    });\n  }\n  \n  return result;\n}\n\n// Código principal para usar no N8N\ntry {\n  // Acessar os dados pelos caminhos especificados\n  let openingHoursData = $json[\"opening_hours\"];\n  \n  // Se não encontrar no primeiro caminho, tentar o segundo\n  if (!openingHoursData) {\n    try {\n      openingHoursData = $item(\"0\").$node[\"Renomeia o campo\"].json[\"opening_hours\"];\n    } catch (e) {\n      console.log('Erro ao acessar segundo caminho:', e.message);\n    }\n  }\n  \n  console.log('=== DEBUG DETALHADO ===');\n  console.log('opening_hours:', JSON.stringify(openingHoursData, null, 2));\n  console.log('Tipo:', typeof openingHoursData);\n  console.log('É array?', Array.isArray(openingHoursData));\n  console.log('Propriedades:', openingHoursData ? Object.keys(openingHoursData) : 'null');\n  \n  if (!openingHoursData) {\n    return [{\n      json: {\n        error: \"opening_hours não encontrado\",\n        jsonCompleto: $json\n      }\n    }];\n  }\n  \n  let periods = [];\n  \n  // Baseado na estrutura que você mostrou, opening_hours deve conter um objeto com 'periods'\n  if (openingHoursData.periods && Array.isArray(openingHoursData.periods)) {\n    periods = openingHoursData.periods;\n    console.log('Usando openingHoursData.periods');\n  }\n  // Se opening_hours for diretamente um array de períodos\n  else if (Array.isArray(openingHoursData)) {\n    periods = openingHoursData;\n    console.log('Usando openingHoursData como array direto');\n  }\n  // Se opening_hours contém os períodos em alguma outra propriedade\n  else if (typeof openingHoursData === 'object') {\n    // Procurar por qualquer array dentro de opening_hours\n    for (let key in openingHoursData) {\n      if (Array.isArray(openingHoursData[key])) {\n        console.log(`Encontrou array na propriedade '${key}'`);\n        periods = openingHoursData[key];\n        break;\n      }\n    }\n  }\n  \n  console.log('Períodos encontrados:', periods.length);\n  console.log('Primeiro período:', periods[0]);\n  \n  if (periods.length === 0) {\n    return [{\n      json: {\n        error: \"Nenhum array de períodos encontrado\",\n        estruturaOpeningHours: openingHoursData,\n        dica: \"Verifique se existe uma propriedade 'periods' ou se opening_hours é um array direto\"\n      }\n    }];\n  }\n  \n  // Processar cada período\n  const processedSchedule = [];\n  \n  periods.forEach((period, index) => {\n    console.log(`Processando período ${index}:`, JSON.stringify(period, null, 2));\n    \n    if (period && period.dayOfWeek && period.start && period.duration !== undefined) {\n      const dayOfWeek = period.dayOfWeek;\n      const startTime = period.start;\n      const duration = parseInt(period.duration);\n      const id = period.id || `period_${index}`;\n      \n      // Calcular horário de fechamento\n      const endTime = addMinutesToTime(startTime, duration);\n      \n      // Converter duração para formato legível\n      const durationFormatted = minutesToTime(duration);\n      \n      processedSchedule.push({\n        id: id,\n        diaSemana: dayMapping[dayOfWeek] || dayOfWeek,\n        horarioAbertura: startTime,\n        horarioFechamento: endTime,\n        duracaoMinutos: duration,\n        duracaoFormatada: durationFormatted\n      });\n      \n      console.log(`Período ${index} processado com sucesso`);\n    } else {\n      console.log(`Período ${index} inválido - propriedades:`, {\n        temDayOfWeek: !!period?.dayOfWeek,\n        temStart: !!period?.start,\n        temDuration: period?.duration !== undefined,\n        valorDuration: period?.duration\n      });\n    }\n  });\n  \n  console.log(`Total processados: ${processedSchedule.length}`);\n  \n  if (processedSchedule.length === 0) {\n    return [{\n      json: {\n        error: \"Nenhum período válido processado\",\n        totalPeriodos: periods.length,\n        exemploPeríodo: periods[0],\n        propriedadesNecessarias: [\"dayOfWeek\", \"start\", \"duration\"]\n      }\n    }];\n  }\n  \n  // Retornar array de objetos para o N8N\n  return processedSchedule.map(item => ({\n    json: {\n      id: item.id,\n      diaSemana: item.diaSemana,\n      horarioAbertura: item.horarioAbertura,\n      horarioFechamento: item.horarioFechamento,\n      duracaoMinutos: item.duracaoMinutos,\n      duracaoFormatada: item.duracaoFormatada\n    }\n  }));\n  \n} catch (error) {\n  return [{\n    json: {\n      error: \"Erro durante processamento\",\n      mensagem: error.message,\n      linha: error.stack\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1488,
        -32
      ],
      "id": "5b3bd321-bdee-4185-aa7e-b28ea7d60b0e",
      "name": "Calcula o tempo do end_time",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe94e0d8-acc7-4fdb-bd12-60a292678ff6",
              "name": "opening_hours",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1328,
        -32
      ],
      "id": "a039e5f0-840d-4492-8375-ba64f49637d8",
      "name": "Renomeia o campo"
    },
    {
      "parameters": {
        "jsCode": "// Função para converter horário HH:MM:SS em minutos desde meia-noite\nfunction timeToMinutes(timeStr) {\n  const [hours, minutes, seconds = 0] = timeStr.split(':').map(Number);\n  return (hours * 60) + minutes + (seconds / 60);\n}\n\n// Função para normalizar nomes de dias da semana\nfunction normalizarDiaSemana(dia) {\n  const diasMap = {\n    // Português\n    'domingo': 'Domingo',\n    'segunda-feira': 'Segunda-feira',\n    'segunda': 'Segunda-feira',\n    'terça-feira': 'Terça-feira', \n    'terca-feira': 'Terça-feira',\n    'terça': 'Terça-feira',\n    'terca': 'Terça-feira',\n    'quarta-feira': 'Quarta-feira',\n    'quarta': 'Quarta-feira',\n    'quinta-feira': 'Quinta-feira',\n    'quinta': 'Quinta-feira',\n    'sexta-feira': 'Sexta-feira',\n    'sexta': 'Sexta-feira',\n    'sábado': 'Sábado',\n    'sabado': 'Sábado',\n    // Inglês\n    'sunday': 'Domingo',\n    'monday': 'Segunda-feira',\n    'tuesday': 'Terça-feira',\n    'wednesday': 'Quarta-feira',\n    'thursday': 'Quinta-feira',\n    'friday': 'Sexta-feira',\n    'saturday': 'Sábado'\n  };\n  \n  return diasMap[dia.toLowerCase()] || dia;\n}\n\n// Função para determinar status e motivo\nfunction determinarStatus(estaAberto, horarioAtualMinutos, aberturaMinutos, fechamentoMinutos, horarioAbertura, horarioFechamento) {\n  if (estaAberto) {\n    return {\n      status: 'ABERTO',\n      motivo: `Funcionando até ${horarioFechamento}`\n    };\n  }\n  \n  // Verificar se vai abrir hoje ainda\n  if (horarioAtualMinutos < aberturaMinutos) {\n    return {\n      status: 'FECHADO',\n      motivo: `Abrirá às ${horarioAbertura}`\n    };\n  }\n  \n  return {\n    status: 'FECHADO',\n    motivo: `Fechou às ${horarioFechamento}`\n  };\n}\n\n// Código principal para usar no N8N\ntry {\n  // Obter data e hora atual usando DateTime do N8N\n  const horarioAtual = $now.toFormat('HH:mm:ss');\n  const diaAtual = $now.toFormat('cccc'); // Nome completo do dia da semana\n  \n  console.log('=== INÍCIO DO PROCESSAMENTO ===');\n  console.log('Dia atual bruto:', diaAtual);\n  console.log('Horário atual:', horarioAtual);\n  \n  // Primeiro, normalizar o dia atual\n  const diaFormatado = normalizarDiaSemana(diaAtual);\n  console.log('Dia atual em português:', diaFormatado);\n  \n  // Receber dados do node anterior\n  let scheduleData = [];\n  \n  try {\n    scheduleData = $(\"Calcula o tempo do end_time\").all();\n    console.log('Dados recebidos do node anterior:', scheduleData.length, 'itens');\n  } catch (e) {\n    console.log('Erro ao acessar node anterior, usando $json:', e.message);\n    scheduleData = Array.isArray($json) ? $json : [$json];\n  }\n  \n  // Extrair dados se vêm com estrutura .json\n  if (scheduleData.length > 0 && scheduleData[0].json) {\n    scheduleData = scheduleData.map(item => item.json);\n    console.log('Dados extraídos da estrutura .json');\n  }\n  \n  // Validação dos dados recebidos\n  if (!Array.isArray(scheduleData) || scheduleData.length === 0) {\n    console.log('ERRO: Nenhum dado de horário válido encontrado');\n    return [{\n      json: {\n        error: \"Nenhum horário encontrado\",\n        dadosRecebidos: scheduleData,\n        diaAtual: diaAtual,\n        horarioAtual: horarioAtual\n      }\n    }];\n  }\n  \n  console.log('Dias disponíveis nos dados:', scheduleData.map(item => item.diaSemana));\n  \n  // Encontrar horário para hoje\n  const horarioHoje = scheduleData.find(item => \n    normalizarDiaSemana(item.diaSemana) === diaFormatado\n  );\n  \n  console.log('=== VERIFICAÇÃO DO DIA ===');\n  console.log('Horário encontrado para hoje:', horarioHoje ? 'SIM' : 'NÃO');\n  \n  if (!horarioHoje) {\n    console.log('Estabelecimento não funciona hoje');\n    return [{\n      json: {\n        isOpen: false,\n        status: 'FECHADO',\n        motivo: `Não há funcionamento às ${diaFormatado}`,\n        diaAtual: diaFormatado,\n        horarioAtual: horarioAtual,\n        diasComFuncionamento: scheduleData.map(item => item.diaSemana)\n      }\n    }];\n  }\n  \n  // Converter horários para minutos para comparação\n  const horarioAtualMinutos = timeToMinutes(horarioAtual);\n  const aberturaMinutos = timeToMinutes(horarioHoje.horarioAbertura);\n  const fechamentoMinutos = timeToMinutes(horarioHoje.horarioFechamento);\n  \n  console.log('=== COMPARAÇÃO DE HORÁRIOS ===');\n  console.log(`Atual: ${horarioAtual} (${horarioAtualMinutos.toFixed(1)} min)`);\n  console.log(`Abertura: ${horarioHoje.horarioAbertura} (${aberturaMinutos.toFixed(1)} min)`);\n  console.log(`Fechamento: ${horarioHoje.horarioFechamento} (${fechamentoMinutos.toFixed(1)} min)`);\n  \n  // Verificar se está aberto\n  let estaAberto = false;\n  \n  if (aberturaMinutos <= fechamentoMinutos) {\n    // Funcionamento no mesmo dia\n    estaAberto = horarioAtualMinutos >= aberturaMinutos && horarioAtualMinutos <= fechamentoMinutos;\n    console.log('Tipo: Funcionamento no mesmo dia');\n  } else {\n    // Funcionamento que atravessa meia-noite\n    estaAberto = horarioAtualMinutos >= aberturaMinutos || horarioAtualMinutos <= fechamentoMinutos;\n    console.log('Tipo: Funcionamento atravessa meia-noite');\n  }\n  \n  console.log('Resultado: Está aberto?', estaAberto);\n  \n  // Determinar status e motivo\n  const { status, motivo } = determinarStatus(\n    estaAberto, \n    horarioAtualMinutos, \n    aberturaMinutos, \n    fechamentoMinutos,\n    horarioHoje.horarioAbertura,\n    horarioHoje.horarioFechamento\n  );\n  \n  console.log('=== RESULTADO FINAL ===');\n  console.log('Status:', status);\n  console.log('Motivo:', motivo);\n  \n  return [{\n    json: {\n      isOpen: estaAberto,\n      status: status,\n      motivo: motivo,\n      diaAtual: diaFormatado,\n      horarioAtual: horarioAtual,\n      horarioAbertura: horarioHoje.horarioAbertura,\n      horarioFechamento: horarioHoje.horarioFechamento,\n      estabelecimentoId: horarioHoje.id || null,\n      duracaoFuncionamento: horarioHoje.duracaoFormatada || null,\n      // Dados adicionais para debug\n      debug: {\n        horarioAtualMinutos: horarioAtualMinutos.toFixed(1),\n        aberturaMinutos: aberturaMinutos.toFixed(1),\n        fechamentoMinutos: fechamentoMinutos.toFixed(1),\n        atravessaMeiaNoite: aberturaMinutos > fechamentoMinutos\n      }\n    }\n  }];\n  \n} catch (error) {\n  console.error('ERRO GERAL:', error);\n  return [{\n    json: {\n      error: \"Erro no processamento\",\n      mensagem: error.message,\n      stack: error.stack,\n      diaAtual: diaAtual || 'N/A',\n      horarioAtual: horarioAtual || 'N/A'\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        -32
      ],
      "id": "947cfe1c-208a-495e-bc1f-4851e3970588",
      "name": "Faz o calculo da diferença de horário",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://merchant-api.ifood.com.br/merchant/v1.0/merchants/{{ $json[\"merchant_id\"] }}/status",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"[GET] Pega o Token\"].json[\"access_token\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        592,
        0
      ],
      "id": "4f980bc8-91f6-4fdd-837d-d73281c66bb5",
      "name": "[GET] Pega o Status das Lojas do IFOOD",
      "alwaysOutputData": false,
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15d10f3a-1457-4a45-9a27-5dbbcf3e00df",
              "leftValue": "={{ $json.isOpen }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1872,
        -32
      ],
      "id": "79cc9781-7039-42fa-aec6-3234fc6bc75c",
      "name": "Verifica se o estabelecimento esta aberto"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7376726e-ee76-4804-b6ce-3600c4ad3b4b",
              "name": "isOpen",
              "value": "={{ $item(\"0\").$node[\"[FILTER] Verifica se esta dentro do horário de funcionamento\"].json[\"isOpen\"] }}",
              "type": "boolean"
            },
            {
              "id": "96bc2c28-c61a-4fd7-a441-71fd8de97cbd",
              "name": "merchant_id",
              "value": "={{ $item(\"0\").$node[\"[FILTER] Verifica se esta dentro do horário de funcionamento\"].json[\"estabelecimentoId\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2304,
        -160
      ],
      "id": "ae1dcf80-041c-443c-ab41-0ab44b0caeaf",
      "name": "Filtragem de dados"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "ifood_merchants",
        "filters": {
          "conditions": [
            {
              "keyName": "merchant_id",
              "condition": "eq",
              "keyValue": "={{ $item(\"0\").$node[\"[FILTER] Verifica se o status é false\"].json[\"id\"] }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "={{ $item(\"0\").$node[\"Verifica se o estabelecimento esta aberto\"].json[\"isOpen\"] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2064,
        160
      ],
      "id": "d1d97b14-555b-485f-ae30-cc7a7b0294c3",
      "name": "[UPDATE] Atualiza o horário de funcionamento1",
      "credentials": {
        "supabaseApi": {
          "id": "WZwCLxbNyERjD8WU",
          "name": "Supabase Plano Certo APP"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2304,
        16
      ],
      "id": "11e00409-9761-46ef-8b6e-b05decf9de92",
      "name": "No Operation, do nothing1"
    }
  ],
  "pinData": {
    "Schedule Trigger": [
      {
        "json": {
          "timestamp": "2025-07-27T11:35:12.116-03:00",
          "Readable date": "July 27th 2025, 11:35:12 am",
          "Readable time": "11:35:12 am",
          "Day of week": "Sunday",
          "Year": "2025",
          "Month": "July",
          "Day of month": "27",
          "Hour": "11",
          "Minute": "35",
          "Second": "12",
          "Timezone": "America/Sao_Paulo (UTC-03:00)"
        }
      }
    ],
    "Renomeia o campo": [
      {
        "json": {
          "opening_hours": {
            "shifts": [
              {
                "id": "e509c02b-507d-4e88-a549-031787cf9da5",
                "dayOfWeek": "THURSDAY",
                "start": "00:00:00",
                "duration": 1352
              },
              {
                "id": "040d8eee-6c46-4908-8480-a5d1c0ce3230",
                "dayOfWeek": "MONDAY",
                "start": "00:00:00",
                "duration": 1439
              },
              {
                "id": "5f116e3b-b3fc-4407-9c42-bfd65e94af3f",
                "dayOfWeek": "SATURDAY",
                "start": "00:00:00",
                "duration": 1439
              },
              {
                "id": "f5d3ea97-0e09-4e46-8c54-4639a78722bc",
                "dayOfWeek": "FRIDAY",
                "start": "00:00:00",
                "duration": 1439
              },
              {
                "id": "3d8ec879-8bb4-4033-b34e-87cc5070a230",
                "dayOfWeek": "TUESDAY",
                "start": "00:00:00",
                "duration": 1439
              },
              {
                "id": "75d8bb6b-308f-46db-a634-abaa4f9c0266",
                "dayOfWeek": "WEDNESDAY",
                "start": "00:00:00",
                "duration": 1439
              },
              {
                "id": "bc4f3035-4ac1-489d-902f-02193eeb2ad6",
                "dayOfWeek": "SUNDAY",
                "start": "00:00:00",
                "duration": 1439
              }
            ]
          }
        }
      }
    ],
    "Faz o calculo da diferença de horário": [
      {
        "json": {
          "isOpen": false,
          "status": "ABERTO",
          "motivo": "Funcionando até 23:59:00",
          "diaAtual": "Segunda-feira",
          "horarioAtual": "08:00:24",
          "horarioAbertura": "00:00:00",
          "horarioFechamento": "23:59:00",
          "estabelecimentoId": "040d8eee-6c46-4908-8480-a5d1c0ce3230",
          "duracaoFuncionamento": "23:59:00",
          "debug": {
            "horarioAtualMinutos": "480.4",
            "aberturaMinutos": "0.0",
            "fechamentoMinutos": "1439.0",
            "atravessaMeiaNoite": false
          }
        }
      }
    ]
  },
  "connections": {
    "[GET] Pega o Token": {
      "main": [
        [
          {
            "node": "[GET ALL] Pega todos os IDs dos Merchants",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[ERROR] Mensagem de Erro do Endpoint": {
      "main": [
        []
      ]
    },
    "[FILTER] Separa dados Importantes": {
      "main": [
        [
          {
            "node": "[FILTER] Verifica se o status é false",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[GET ALL] Pega todos os IDs dos Merchants": {
      "main": [
        [
          {
            "node": "[GET] Pega o Status das Lojas do IFOOD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "[GET] Pega o Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[FILTER] Verifica se o status é false": {
      "main": [
        [
          {
            "node": "[GET] Opening-Hours",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[UPDATE] Atualiza o horário de funcionamento": {
      "main": [
        []
      ]
    },
    "[GET] Opening-Hours": {
      "main": [
        [
          {
            "node": "Renomeia o campo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcula o tempo do end_time": {
      "main": [
        [
          {
            "node": "Faz o calculo da diferença de horário",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Renomeia o campo": {
      "main": [
        [
          {
            "node": "Calcula o tempo do end_time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Faz o calculo da diferença de horário": {
      "main": [
        [
          {
            "node": "Verifica se o estabelecimento esta aberto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[GET] Pega o Status das Lojas do IFOOD": {
      "main": [
        [
          {
            "node": "[FILTER] Separa dados Importantes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[ERROR] Mensagem de Erro do Endpoint",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se o estabelecimento esta aberto": {
      "main": [
        [
          {
            "node": "[FILTER] Verifica se esta dentro do horário de funcionamento",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[UPDATE] Atualiza o horário de funcionamento1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[FILTER] Verifica se esta dentro do horário de funcionamento": {
      "main": [
        [
          {
            "node": "Filtragem de dados",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtragem de dados": {
      "main": [
        [
          {
            "node": "[UPDATE] Atualiza o horário de funcionamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9cd64f12-1ebe-44ab-8639-6e3fe89c1bae",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2d671f0f22e0456e67c382ec7d8684bfcf78d43fd576c57604c7a586aea237f0"
  },
  "id": "NwtWGEJBYN394cVr",
  "tags": []
}
    try {
      console.log('üçî [SIMPLE] Recebendo dados:', itemData);

      // 1. Buscar token
      const { data: tokenData, error: tokenError } = await this.supabase
        .from('ifood_tokens')
        .select('access_token')
        .eq('user_id', userId)
        .single();

      if (tokenError || !tokenData?.access_token) {
        return { success: false, error: 'Token n√£o encontrado' };
      }

      // 2. Montar payload EXATAMENTE como documenta√ß√£o do iFood
      const ifoodPayload = {
        item: {
          status: itemData.item.status || 'AVAILABLE',
          price: {
            value: itemData.item.price.value
          },
          categoryId: itemData.item.categoryId
        },
        products: [
          {
            name: itemData.products[0].name
          }
        ]
      };

      // Adicionar campos opcionais APENAS se existirem
      if (itemData.item.price.originalValue) {
        ifoodPayload.item.price.originalValue = itemData.item.price.originalValue;
      }
      
      if (itemData.products[0].description) {
        ifoodPayload.products[0].description = itemData.products[0].description;
      }

      if (itemData.item.externalCode) {
        ifoodPayload.item.externalCode = itemData.item.externalCode;
      }

      console.log('üì§ [SIMPLE] Enviando para iFood:', JSON.stringify(ifoodPayload, null, 2));

      // 3. Enviar para iFood API
      const url = `${this.IFOOD_API_BASE_URL}/catalog/v2.0/merchants/${merchantId}/items`;
      const response = await axios.put(url, ifoodPayload, {
        headers: {
          'Authorization': `Bearer ${tokenData.access_token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      console.log('‚úÖ [SIMPLE] Resposta iFood:', response.data);

      // 4. Salvar no banco local
      if (response.data) {
        try {
          await this.supabase
            .from('products')
            .upsert({
              item_id: response.data.id || itemData.item.id,
              merchant_id: merchantId,
              name: itemData.products[0].name,
              description: itemData.products[0].description || '',
              price: itemData.item.price.value,
              original_price: itemData.item.price.originalValue,
              is_active: itemData.item.status === 'AVAILABLE',
              client_id: userId,
              updated_at: new Date().toISOString()
            });
          console.log('üíæ [SIMPLE] Salvo no banco local');
        } catch (dbError) {
          console.warn('‚ö†Ô∏è [SIMPLE] Erro ao salvar localmente:', dbError);
        }
      }

      return {
        success: true,
        data: response.data
      };

    } catch (error: any) {
      console.error('‚ùå [SIMPLE] Erro:', error.response?.data || error.message);
      
      // Log detalhado do erro para debug
      if (error.response?.data?.error?.details) {
        console.error('‚ùå [SIMPLE] Detalhes:', error.response.data.error.details);
      }

      return {
        success: false,
        error: error.response?.data?.error?.message || error.message || 'Erro interno'
      };
    }
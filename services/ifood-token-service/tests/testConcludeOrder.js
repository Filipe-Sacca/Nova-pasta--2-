const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const API_BASE_URL = 'http://localhost:8085';
const ORDER_ID = '140f9139-7174-4945-b964-daceb7e6c641';
const USER_ID = 'c1488646-aca8-4220-aacc-00e7ae3d6490';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function testConcludeOrder() {
  console.log('üîç Testando conclus√£o do pedido no iFood...');
  console.log('üì¶ Order ID:', ORDER_ID);
  console.log('');
  
  try {
    // 1. Primeiro verificar o status atual do pedido
    console.log('1Ô∏è‚É£ Verificando status atual do pedido...');
    const { data: orderData, error } = await supabase
      .from('ifood_orders')
      .select('*')
      .eq('ifood_order_id', ORDER_ID)
      .single();
    
    if (error || !orderData) {
      console.log('‚ùå Pedido n√£o encontrado no banco de dados');
      return;
    }
    
    console.log('üìã Pedido encontrado:');
    console.log('   Status atual:', orderData.status);
    console.log('   Display ID:', orderData.display_id);
    console.log('   Merchant ID:', orderData.merchant_id);
    console.log('');
    
    // 2. Buscar o token de acesso
    console.log('2Ô∏è‚É£ Verificando token de acesso...');
    const { data: tokenData, error: tokenError } = await supabase
      .from('ifood_tokens')
      .select('*')
      .eq('user_id', USER_ID)
      .single();
    
    if (tokenError || !tokenData) {
      console.log('‚ùå Token n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Token encontrado e v√°lido');
    console.log('');
    
    // 3. Testar chamada direta para a API do iFood
    console.log('3Ô∏è‚É£ Testando chamada direta para API do iFood...');
    console.log('   Endpoint: POST /order/v1.0/orders/' + ORDER_ID + '/conclude');
    
    try {
      const ifoodResponse = await axios({
        method: 'POST',
        url: `https://merchant-api.ifood.com.br/order/v1.0/orders/${ORDER_ID}/conclude`,
        headers: {
          'Authorization': `Bearer ${tokenData.access_token}`,
          'Content-Type': 'application/json'
        },
        data: {}
      });
      
      console.log('‚úÖ Resposta do iFood:');
      console.log('   Status:', ifoodResponse.status);
      console.log('   Data:', JSON.stringify(ifoodResponse.data, null, 2));
      
    } catch (ifoodError) {
      console.log('‚ùå Erro na chamada direta ao iFood:');
      console.log('   Status:', ifoodError.response?.status);
      console.log('   Erro:', ifoodError.response?.data || ifoodError.message);
      
      if (ifoodError.response?.status === 400) {
        console.log('');
        console.log('‚ö†Ô∏è ERRO 400 - Bad Request');
        console.log('Poss√≠veis causas:');
        console.log('1. O pedido n√£o est√° em status que permite conclus√£o');
        console.log('2. O pedido j√° foi conclu√≠do anteriormente');
        console.log('3. O pedido foi cancelado');
        console.log('4. Regra de neg√≥cio do iFood n√£o permite conclus√£o neste momento');
      } else if (ifoodError.response?.status === 404) {
        console.log('');
        console.log('‚ö†Ô∏è ERRO 404 - Not Found');
        console.log('O pedido n√£o foi encontrado no iFood');
        console.log('Isso pode significar que o pedido expirou ou foi removido');
      } else if (ifoodError.response?.status === 422) {
        console.log('');
        console.log('‚ö†Ô∏è ERRO 422 - Unprocessable Entity');
        console.log('O pedido n√£o pode ser conclu√≠do devido ao seu estado atual');
        console.log('Verifique o status do pedido no painel do iFood');
      }
    }
    
    // 4. Verificar status do pedido no iFood
    console.log('');
    console.log('4Ô∏è‚É£ Verificando detalhes do pedido no iFood...');
    
    try {
      const detailsResponse = await axios({
        method: 'GET',
        url: `https://merchant-api.ifood.com.br/order/v1.0/orders/${ORDER_ID}`,
        headers: {
          'Authorization': `Bearer ${tokenData.access_token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('üìã Detalhes do pedido no iFood:');
      console.log('   Status:', detailsResponse.data.status?.value || 'N/A');
      console.log('   C√≥digo:', detailsResponse.data.code || 'N/A');
      console.log('   Cliente:', detailsResponse.data.customer?.name || 'N/A');
      console.log('   Tipo de entrega:', detailsResponse.data.deliveryMethod?.mode || 'N/A');
      
      const currentStatus = detailsResponse.data.status?.value;
      console.log('');
      console.log('üìä An√°lise do status:');
      
      if (currentStatus === 'CONCLUDED' || currentStatus === 'DELIVERED') {
        console.log('‚úÖ O pedido j√° est√° conclu√≠do no iFood!');
      } else if (currentStatus === 'DISPATCHED') {
        console.log('üì¶ O pedido est√° como DISPATCHED');
        console.log('   Deve ser poss√≠vel concluir agora');
      } else if (currentStatus === 'CANCELLED') {
        console.log('‚ùå O pedido foi cancelado e n√£o pode ser conclu√≠do');
      } else {
        console.log(`‚ö†Ô∏è Status atual: ${currentStatus}`);
        console.log('   Pode n√£o ser poss√≠vel concluir neste status');
      }
      
    } catch (detailsError) {
      console.log('‚ùå Erro ao buscar detalhes:', detailsError.response?.data || detailsError.message);
    }
    
    // 5. Verificar regras de neg√≥cio do iFood
    console.log('');
    console.log('üìö REGRAS DE NEG√ìCIO DO IFOOD:');
    console.log('=====================================');
    console.log('Para concluir um pedido (conclude), ele deve estar:');
    console.log('1. Com status DISPATCHED (despachado)');
    console.log('2. N√£o pode estar cancelado');
    console.log('3. N√£o pode j√° estar conclu√≠do');
    console.log('4. Para entregas do iFood, o entregador deve confirmar a entrega');
    console.log('');
    console.log('‚ö†Ô∏è IMPORTANTE:');
    console.log('Se o pedido √© entregue pelo iFood (n√£o pela loja),');
    console.log('apenas o entregador pode marcar como conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar
testConcludeOrder().catch(console.error);
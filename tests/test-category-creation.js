// Teste r√°pido da cria√ß√£o de categoria
async function testCategoryCreation() {
  try {
    console.log('üß™ Testando cria√ß√£o de categoria...');

    // 1. Primeiro, vamos buscar usu√°rios com tokens v√°lidos
    console.log('1Ô∏è‚É£ Buscando usu√°rios com tokens...');
    const tokenResponse = await fetch('http://localhost:8083/token/user/test-user-001');
    
    if (!tokenResponse.ok) {
      console.log('‚ùå Nenhum token encontrado para test-user-001');
      console.log('üîç Vamos testar com um usu√°rio real...');
      
      // Testar com outro usu√°rio conhecido
      const tokenResponse2 = await fetch('http://localhost:8083/token/user/4c5ab8a5-1234-4567-8901-123456789abc');
      
      if (!tokenResponse2.ok) {
        console.log('‚ùå Tamb√©m n√£o encontrou token para o segundo usu√°rio');
        console.log('üìã Vamos ver que tokens existem...');
        
        // Vamos testar o endpoint que lista usu√°rios (se funcionar)
        try {
          const listResponse = await fetch('http://localhost:8083/', {
            method: 'GET'
          });
          const listData = await listResponse.json();
          console.log('üìä Endpoints dispon√≠veis:', listData.endpoints);
          
          return;
        } catch (error) {
          console.error('‚ùå Erro ao listar endpoints:', error);
          return;
        }
      }
      
      const tokenData2 = await tokenResponse2.json();
      console.log('‚úÖ Token encontrado para usu√°rio 2:', !!tokenData2.access_token);
      
      // Usar esse token para testar
      return testWithToken(tokenData2.access_token, '4c5ab8a5-1234-4567-8901-123456789abc');
    }
    
    const tokenData = await tokenResponse.json();
    console.log('‚úÖ Token encontrado:', !!tokenData.access_token);
    
    return testWithToken(tokenData.access_token, 'test-user-001');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

async function testWithToken(token, userId) {
  try {
    console.log('2Ô∏è‚É£ Testando cria√ß√£o de categoria com token...');
    
    // Usar um merchant ID que sabemos que existe
    const merchantId = '577cb3b1-5845-4fbc-a219-8cd3939cb9ea';
    
    const categoryResponse = await fetch(`http://localhost:8083/merchants/${merchantId}/categories`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        user_id: userId,
        name: 'Categoria Teste API',
        externalCode: `EXT_TEST_${Date.now()}`,
        status: 'AVAILABLE',
        index: 0,
        template: 'DEFAULT'
      })
    });

    const categoryResult = await categoryResponse.json();
    
    console.log('üìä Status da resposta:', categoryResponse.status);
    console.log('üì¶ Resultado:', categoryResult);
    
    if (categoryResult.success) {
      console.log('‚úÖ Categoria criada com sucesso!');
    } else {
      console.log('‚ùå Falha ao criar categoria:', categoryResult.error);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste com token:', error);
  }
}

// Executar o teste
testCategoryCreation();